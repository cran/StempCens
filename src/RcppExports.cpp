// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// crossdist
arma::mat crossdist(arma::mat m1);
RcppExport SEXP _StempCens_crossdist(SEXP m1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m1(m1SEXP);
    rcpp_result_gen = Rcpp::wrap(crossdist(m1));
    return rcpp_result_gen;
END_RCPP
}
// crossdist2
arma::mat crossdist2(arma::vec m1);
RcppExport SEXP _StempCens_crossdist2(SEXP m1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type m1(m1SEXP);
    rcpp_result_gen = Rcpp::wrap(crossdist2(m1));
    return rcpp_result_gen;
END_RCPP
}
// inversa
arma::mat inversa(arma::mat M);
RcppExport SEXP _StempCens_inversa(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(inversa(M));
    return rcpp_result_gen;
END_RCPP
}
// DevCorMatrix
List DevCorMatrix(arma::mat H, double phi, double kappa, String type);
RcppExport SEXP _StempCens_DevCorMatrix(SEXP HSEXP, SEXP phiSEXP, SEXP kappaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DevCorMatrix(H, phi, kappa, type));
    return rcpp_result_gen;
END_RCPP
}
// ScoreVector
arma::mat ScoreVector(arma::vec yb, arma::mat x, arma::vec beta, double sigma2, arma::vec media, arma::mat PsiInv, arma::mat Omega, arma::mat d1Spat, arma::mat d1Temp, bool tauF);
RcppExport SEXP _StempCens_ScoreVector(SEXP ybSEXP, SEXP xSEXP, SEXP betaSEXP, SEXP sigma2SEXP, SEXP mediaSEXP, SEXP PsiInvSEXP, SEXP OmegaSEXP, SEXP d1SpatSEXP, SEXP d1TempSEXP, SEXP tauFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type media(mediaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type PsiInv(PsiInvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type d1Spat(d1SpatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type d1Temp(d1TempSEXP);
    Rcpp::traits::input_parameter< bool >::type tauF(tauFSEXP);
    rcpp_result_gen = Rcpp::wrap(ScoreVector(yb, x, beta, sigma2, media, PsiInv, Omega, d1Spat, d1Temp, tauF));
    return rcpp_result_gen;
END_RCPP
}
// HessianMatrix
List HessianMatrix(arma::vec yb, arma::mat yyb, arma::mat x, arma::vec beta, double sigma2, arma::mat PsiInv, arma::mat Omega, arma::mat d1Spat, arma::mat d1Temp, arma::mat dSpaTem, arma::mat d2Spat, arma::mat d2Temp, bool tauF);
RcppExport SEXP _StempCens_HessianMatrix(SEXP ybSEXP, SEXP yybSEXP, SEXP xSEXP, SEXP betaSEXP, SEXP sigma2SEXP, SEXP PsiInvSEXP, SEXP OmegaSEXP, SEXP d1SpatSEXP, SEXP d1TempSEXP, SEXP dSpaTemSEXP, SEXP d2SpatSEXP, SEXP d2TempSEXP, SEXP tauFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type yyb(yybSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type PsiInv(PsiInvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type d1Spat(d1SpatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type d1Temp(d1TempSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dSpaTem(dSpaTemSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type d2Spat(d2SpatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type d2Temp(d2TempSEXP);
    Rcpp::traits::input_parameter< bool >::type tauF(tauFSEXP);
    rcpp_result_gen = Rcpp::wrap(HessianMatrix(yb, yyb, x, beta, sigma2, PsiInv, Omega, d1Spat, d1Temp, dSpaTem, d2Spat, d2Temp, tauF));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StempCens_crossdist", (DL_FUNC) &_StempCens_crossdist, 1},
    {"_StempCens_crossdist2", (DL_FUNC) &_StempCens_crossdist2, 1},
    {"_StempCens_inversa", (DL_FUNC) &_StempCens_inversa, 1},
    {"_StempCens_DevCorMatrix", (DL_FUNC) &_StempCens_DevCorMatrix, 4},
    {"_StempCens_ScoreVector", (DL_FUNC) &_StempCens_ScoreVector, 10},
    {"_StempCens_HessianMatrix", (DL_FUNC) &_StempCens_HessianMatrix, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_StempCens(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
